<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Rumyra's Head</title>
  <subtitle></subtitle>
  <id>http://rumyrashead.com/</id>
  <link href="http://rumyrashead.com/"/>
  <link href="http://rumyrashead.com/feed.xml" rel="self"/>
  <updated>2016-11-01T00:00:00+00:00</updated>
  <author>
    <name>Ruth John - @rumyra</name>
  </author>
  <entry>
    <title>Codevember Number One</title>
    <link rel="alternate" href="http://rumyrashead.com/codevember-number-one.html"/>
    <id>http://rumyrashead.com/codevember-number-one.html</id>
    <published>2016-11-01T00:00:00+00:00</published>
    <updated>2016-11-01T21:56:29+00:00</updated>
    <author>
      <name>Ruth John - @rumyra</name>
    </author>
    <content type="html">&lt;p&gt;Welcome to my Codevember. This month I’m going to take you through some audio visualisation techniques in the browser. I’ve written and spoken about this a number of times, as well as made a few codepens every now and again, but I thought I would take this month to go over creating audio triggered visuals from the ground up.&lt;/p&gt;

&lt;p&gt;Not only do I hope this be a learning journey for you, but one for me as well, there’s been a number of different techniques, new web features, libraries etc… that I’ve wanted to try, it seems like Codevember is the perfect opportunity.&lt;/p&gt;

&lt;p data-height="300" data-theme-id="1345" data-slug-hash="pEMGEP" data-default-tab="js,result" data-user="Rumyra" data-embed-version="2" data-pen-title="Codevember AudioVis #1" class="codepen"&gt;See the Pen &lt;a href="https://codepen.io/Rumyra/pen/pEMGEP/"&gt;Codevember AudioVis #1&lt;/a&gt; by Rumyra (&lt;a href="http://codepen.io/Rumyra"&gt;@Rumyra&lt;/a&gt;) on &lt;a href="http://codepen.io"&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async="" src="https://production-assets.codepen.io/assets/embed/ei.js"&gt;&lt;/script&gt;

&lt;p&gt;We’re going to start vanilla, from the very basics, just using the very minimal we can from the web audio API and some DOM elements, then slowly I’ll start trying some different techniques. By the end we would have covered audio analysing, new css techniques, d3.js which I find is so suited to audio-vis, bringing in some svgs and hopefully some canvas too.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;And along with each technique I’ll be taking influence from somewhere different, be that an artist, a book from the &lt;a href="https://www.instagram.com/p/BLWXiGdDDmo/?taken-by=rumyra"&gt;stepshelf&lt;/a&gt; or some tumblr somewhere.&lt;/p&gt;

&lt;p&gt;By the end of the month you’ll understand why audio vis has excited me for all these years, and why the browser can be such an incredible environment for this creativity.&lt;/p&gt;

&lt;p&gt;A couple of things to note:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;This is a learning experience for me too, so things may stay quite basic. The code will probably &lt;em&gt;be&lt;/em&gt; basic, however this does mean it won’t be too complicated for entry level coders.&lt;/li&gt;
  &lt;li&gt;I’ll be analysing audio from the microphone, which means I’ll be using the &lt;a href="https://developer.mozilla.org/en-US/docs/Web/API/Media_Streams_API"&gt;Media Streams API&lt;/a&gt;, which only works over https, you’ll need to view the pens over https://codepen.io&lt;/li&gt;
  &lt;li&gt;Things work best in Canary so I’ve noticed, please don’t expect pens to work cross browser. The main end game for me is to integrate them into my VJ software, which I run in a sandboxed environment (my machine, my choice of browser) sux I know!&lt;/li&gt;
  &lt;li&gt;I’ll be cross posting all these articles to both my &lt;a href=""&gt;Codepen Blog&lt;/a&gt; and &lt;a href="http://rumyrashead.com/"&gt;my personal blog&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;There's a high chance I won't make every single day, but I will try 🙃&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id="so-lets-begin"&gt;So Let’s Begin&lt;/h2&gt;

&lt;h3 id="basic-audio-analysis-and-dom-manipulation"&gt;Basic audio analysis and DOM manipulation&lt;/h3&gt;

&lt;p&gt;Let’s start with the audio things we’re going to need. The audio API can be a bit over whelming. There’s a whole bunch of properties and methods you get when you create a new audio context. There’s inputs, filters, effects… but we can feel a bit better because we only need one piece of functionality - the analyser.&lt;/p&gt;

&lt;h4 id="setting-up-the-audio-api"&gt;Setting up the audio API&lt;/h4&gt;

&lt;p&gt;Let’s start by creating a new audio context and initiating our variables.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;// set up audio context
var audioContext = (window.AudioContext || window.webkitAudioContext);
// create audio class
if (audioContext) {
  // Web Audio API is available.
  var audioAPI = new audioContext();
  } else {
  // Web Audio API is not available. Ask the user to use a supported browser.
  alert("Oh nos! It appears your browser does not support the Web Audio API, please upgrade or use a different browser");
}

// variables
var analyserNode,
  frequencyData = new Uint8Array(256);
const screen = document.querySelector('#screen'),
  allRepeatedEls = document.querySelectorAll('#screen section'),
  totalEls = allRepeatedEls.length;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we’re checking the browser has the audio API available and instantiating a new context &lt;code&gt;var audioAPI&lt;/code&gt; for use.&lt;/p&gt;

&lt;p&gt;Then we’re just creating a few variables for use later on.&lt;/p&gt;

&lt;p&gt;Now we need to hook into the functionality of the analyser node that comes with the audio API. The analyser node comes with methods for us to access both frequency and time data, for what we want we just need the &lt;code&gt;getByteFrequencyData&lt;/code&gt; method which we will use later. But as that uses ‘fft’ data (fast fourier transform) we need to set up an array for that data to be saved into, and also set the size. This is where the &lt;code&gt;frequencyData = new Uint8Array(256)&lt;/code&gt; comes into play above. A good way to view the size is it’s a bit like resolution - the bigger this array, the more intricate the data and thus the more information about the frequencies heard we can display. This is more than likely set to around 1024, however for the purposes of a simple visualisation like this first one I’m taking you through, 256 more than suffices.&lt;/p&gt;

&lt;p&gt;So let’s create and connect our analyser node:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;function createAnalyserNode(audioSource) {
  analyserNode = audioAPI.createAnalyser();
  analyserNode.fftSize = 512;
  audioSource.connect(analyserNode);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note that the &lt;code&gt;fftSize&lt;/code&gt; property has been set to twice the array size we set earlier. The in depth stuff behind fast Fourier transforms are slightly out of the remit of this article, but you can &lt;a href="https://en.wikipedia.org/wiki/Fast_Fourier_transform"&gt;read more here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Another thing to note is we &lt;em&gt;connect&lt;/em&gt; the analyser node to the audio source, as all methods within the audio API are are viewed upon as nodes that you connect together. So you can connect inputs to filters to volume nodes to analysers etc…&lt;/p&gt;

&lt;h4 id="getting-some-sound"&gt;Getting some sound&lt;/h4&gt;

&lt;p&gt;Now we want an input for the audio API to analyse, we can just grab the microphone input: (NB this API needs permissions and only works over https or on localhost… just change the codepen url to have https:// at the beginning).&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;// getUserMedia success callback -&amp;gt; pipe audio stream into audio API
var gotStream = function(stream) {
  // Create an audio input from the stream.
  var audioSource = audioAPI.createMediaStreamSource(stream);
  createAnalyserNode(audioSource);
  animateStuff();
}

navigator.mediaDevices.getUserMedia({ audio: true, video: false })
  .then(gotStream);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We’re calling the &lt;code&gt;gotStream&lt;/code&gt; function when we receive an audio stream from the microphone, and within that we’re piping it into the audio API and calling the &lt;code&gt;createAnalyserNode&lt;/code&gt; function from above.&lt;/p&gt;

&lt;p&gt;So the audio API now is analysing the audio stream from the microphone and we can stop here. But, we kinda want to move something around the browser based on the data we receive.&lt;/p&gt;

&lt;h4 id="animating-stuff"&gt;Animating stuff&lt;/h4&gt;

&lt;p&gt;You may have noticed the &lt;code&gt;gotStream&lt;/code&gt; function calling &lt;code&gt;animateStuff()&lt;/code&gt; which we haven’t written yet. Now here’s the fun part.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;function animateStuff() {
  requestAnimationFrame(animateStuff);
  analyserNode.getByteFrequencyData(frequencyData);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is the start of our awesome animating function. We want it to keep running and analysing the sound, so we’ll use &lt;code&gt;requestAnimationFrame&lt;/code&gt; for that. Then we call the &lt;code&gt;getByteFrequencyData&lt;/code&gt; method on the analyser node we connected earlier and pass in our frequencyData array. This means at every item in our array represents a frequency and when called a volume level is being logged against that frequency.&lt;/p&gt;

&lt;p&gt;The volume, (it’s actually amplitude, but, meh words), is just a number and we can use that number to change things, it’s updating all the time because of our &lt;code&gt;requestAnimationFrame&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So to my inspiration for this set. Let me introduce &lt;a href="https://www.artsy.net/artist/bridget-riley"&gt;Bridget Riley&lt;/a&gt;. I only discovered her this year on a visit to the &lt;a href="https://www.nationalgalleries.org/visit/introduction-118"&gt;Scottish Gallery of Modern Art&lt;/a&gt; in Edinburgh - such stunning paintings! I knew as soon as I walked into the exhibition I had to make some of them move!&lt;/p&gt;

&lt;figure&gt;
  &lt;img src="/media/bridgetBook.jpg" /&gt;
  &lt;figcaption&gt;Bridget Rileys Book from the Scottish exhibition&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;So let’s start with 'Rattle'. It’s a simple one where we can just create some sections and style them with background gradients and then make them shrink and grow horizontally to the sound.&lt;/p&gt;

&lt;figure&gt;
  &lt;img src="/media/rattle.jpg" /&gt;
  &lt;figcaption&gt;Bridget Riley: Rattle&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;div id="screen"&amp;gt;
  &amp;lt;section&amp;gt;&amp;lt;/section&amp;gt;
  &amp;lt;section&amp;gt;&amp;lt;/section&amp;gt;
  &amp;lt;section&amp;gt;&amp;lt;/sect&amp;lt;on&amp;gt;
  &amp;lt;section&amp;gt;&amp;lt;/section&amp;gt;
  &amp;lt;section&amp;gt;&amp;lt;/section&amp;gt;
  &amp;lt;section&amp;gt;&amp;lt;/section&amp;gt;
  &amp;lt;section&amp;gt;&amp;lt;/section&amp;gt;
  &amp;lt;section&amp;gt;&amp;lt;/section&amp;gt;
&amp;lt;/div&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="language-css"&gt;#screen {
  position: relative; padding:1vh;
  width: 100vw; height: 100vh;
  box-sizing: border-box;
  background: black;
}
#screen section {
  height:8vh; margin: 3vh;
  background-color: mediumorchid;
  background-image: linear-gradient(45deg, mediumorchid 9%, seagreen 9%, seagreen 16%, white 16%, white 34%, seagreen 34%, seagreen 41%, mediumorchid 41%, mediumorchid 59%, seagreen 59%, seagreen 66%, white 66%, white 84%, seagreen 84%, seagreen 91%, mediumorchid 91% );
  background-size: 2vh 2vh;
}
#screen section:nth-of-type(2n) {
  background-image: linear-gradient(135deg, indianred 9%, seagreen 9%, seagreen 16%, white 16%, white 34%, seagreen 34%, seagreen 41%, indianred 41%, indianred 59%, seagreen 59%, seagreen 66%, white 66%, white 84%, seagreen 84%, seagreen 91%, indianred 91% );
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we have 8 sections, all stretched along our &lt;em&gt;screen&lt;/em&gt; div. Let’s loop over them and change their width depending on the volume of a frequency.&lt;/p&gt;

&lt;p&gt;You may have noticed already we have 256 frequencies and only 8 sections. There’s a couple of ways we can &lt;em&gt;play&lt;/em&gt; this, (sorry), we can either use the first 8 items in the frequency array for the first section and the next 8 for the next and so on, or we can jump 32 items and get a range of 8 frequencies from our spectrum. The choice is yours really - now it’s just about having fun and playing with the maths. Sometimes it also depends on what music you’re playing.&lt;/p&gt;

&lt;p&gt;For simplicity, I’m going to jump.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;function animateStuff() {
  requestAnimationFrame(animateStuff);
  analyserNode.getByteFrequencyData(frequencyData);
  
  for (let i=0; i&amp;lt;totalEls; i++) {
    var freqVol = frequencyData[i*32]/2;
    allRepeatedEls[i].style.width = freqVol+'vw';
  }
  
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The volume values received back from the analyser node range from 0-255, so I’m dividing by 2 to give rough value for the section to take up.&lt;/p&gt;

&lt;p&gt;As the weeks go by we’ll find better, more smoother ways of dealing with the DOM, but for today; huzzah! We made some things move to the music - it plays pretty well to &lt;a href="https://www.youtube.com/watch?v=1plPyJdXKIY"&gt;Warrant G and Nate Dog - Regulate&lt;/a&gt;, if you were wondering…&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>A Little Thing About Blends</title>
    <link rel="alternate" href="http://rumyrashead.com/a-little-thing-about-blends.html"/>
    <id>http://rumyrashead.com/a-little-thing-about-blends.html</id>
    <published>2016-10-20T01:00:00+01:00</published>
    <updated>2016-10-20T13:05:18+01:00</updated>
    <author>
      <name>Ruth John - @rumyra</name>
    </author>
    <content type="html">&lt;p&gt;I learnt a little thing whilst playing around with &lt;a href="https://developer.mozilla.org/en-US/docs/Web/CSS/mix-blend-mode"&gt;CSS blend modes&lt;/a&gt; this morning which I thought I should share.&lt;/p&gt;

&lt;p&gt;I was just making a little visual:&lt;/p&gt;

&lt;figure class="media-feature"&gt;
  &lt;img src="/media/visualPlain.jpg" /&gt;
  &lt;figcaption&gt;Visual without blend modes&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;And I thought, wouldn't it be lovely to have some CSS blend modes to add some 🤗&lt;/p&gt;

&lt;p&gt;So I wrote a little Sass @each to try them out. Firstly here's the HTML of one &lt;em&gt;flower&lt;/em&gt;, of which I have nine.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-html"&gt;&amp;lt;section&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;i&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;i&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;i&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;i&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;i&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;i&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;i&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;i&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;i&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;i&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;i&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/div&amp;gt;
  &amp;lt;div&amp;gt;&amp;lt;i&amp;gt;&amp;lt;/i&amp;gt;&amp;lt;/div&amp;gt;
&amp;lt;/section&amp;gt;  
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A bit gumphy, but rotating and sizing and well yeh… Then the @each&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-css"&gt;@each $num, $blendMode in 
  ( 1:overlay, 2:darken, 3:color-dodge, 4:color-burn, 5:hard-light, 6:difference, 7:hue, 8:saturation, 9:luminosity ) {
  #ohFour #screen section:nth-of-type(#{$num}) i {
    mix-blend-mode: $blendMode;
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;There are more modes than this, but I've only got 9 sections and we can subsitute.&lt;/p&gt;

&lt;p&gt;Spot the obvious mistake. By putting the blend mode onto the &lt;code&gt;i&lt;/code&gt; element, we see no difference. As per the spec:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The mix-blend-mode CSS property describes how an element's content should blend with the content of the element's direct parent and the element's background.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;So let's back up and put it on the &lt;code&gt;section&lt;/code&gt;. Phew, there we go that's better.&lt;/p&gt;

&lt;figure class="media-feature"&gt;
  &lt;img src="/media/visualFirstBlend.jpg" /&gt;
  &lt;figcaption&gt;Visual with first blend modes&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;hr /&gt;

&lt;h2 id="slow-rendering-and-fps-monitor"&gt;Slow rendering and FPS Monitor&lt;/h2&gt;

&lt;p&gt;Now we could have put the blend mode on the &lt;code&gt;div&lt;/code&gt; elements. However the performance changes dramtically.&lt;/p&gt;

&lt;p&gt;What with the audio analysis, amount of DOM elements and animation &lt;em&gt;with&lt;/em&gt; these blend modes is pretty trying in Chrome. I'm getting about 5fps when on the &lt;code&gt;div&lt;/code&gt;. Whereas on the &lt;code&gt;section&lt;/code&gt; I run at about 15fps. Not amazing, but I wonder who would notice in a club.&lt;/p&gt;

&lt;p&gt;If you want to check out the FPS monitor in Chrome Dev Tools, just open them, click on the menu at the top right (three vertical dots), choose &lt;em&gt;'More tools'&lt;/em&gt; -&amp;gt; &lt;em&gt;'Rendering settings'&lt;/em&gt; and check &lt;em&gt;'FPS Meter'&lt;/em&gt;.&lt;/p&gt;

&lt;h2 id="different-blend-modes"&gt;Different Blend Modes&lt;/h2&gt;

&lt;p&gt;Yeh I know you see it too. We've lost the little &lt;em&gt;flowers&lt;/em&gt; in the centre. Some blend modes don't like being blended against black. Let's change that @each up a bit!&lt;/p&gt;

&lt;figure class="media-feature"&gt;
  &lt;img src="/media/visualSecBlend.jpg" /&gt;
  &lt;figcaption&gt;Visual with second blend modes&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;I'm gonna be having some fun with CSS Blend Modes! Chroma key on video anyone?&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>A Year On...</title>
    <link rel="alternate" href="http://rumyrashead.com/a-year-on.html"/>
    <id>http://rumyrashead.com/a-year-on.html</id>
    <published>2016-10-05T01:00:00+01:00</published>
    <updated>2016-10-05T13:38:37+01:00</updated>
    <author>
      <name>Ruth John - @rumyra</name>
    </author>
    <content type="html">&lt;p&gt;It’s been a year since I wrote for Geek Mental Health week about my (then) recent experiences with depression. It’s both strange and fitting that it’s a year on.&lt;/p&gt;

&lt;h3 id="its-been-one-hell-of-a-year"&gt;It’s been one hell of a year.&lt;/h3&gt;

&lt;p&gt;Re-reading the article now it seems such a sensible read. I really felt like I was on the road to recovery in last October, but the road was longer than I expected, and I’m pretty sure there’s still a long way to go.&lt;/p&gt;

&lt;p&gt;I’d had nearly a couple of months off over the summer and was integrated back into work by the time I wrote that article. Looking back now of course that was not enough time, it was rushed. Not just because you start to feel better and so think you &lt;em&gt;are&lt;/em&gt; better, but people around you are urging you to get better as well and that’s because they want you to be better. Unfortunately it’s not that simple. I was still recovering from quite a big shock.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;The only way I can describe the way I was feeling is that all my skin had been worn away by things that had happened, sanded down, and I couldn’t take any more things wearing it away. I needed recovery to build it all back up again and that was going to take a lot of time.&lt;/p&gt;

&lt;h3 id="i-was-better-but-i-wasnt-well"&gt;I was better, but I wasn’t well.&lt;/h3&gt;

&lt;p&gt;With the support of councilling, I had made some decisions about the changes I wanted to make in my life, some of which were driving the unhappiness, some I hoped would help me move on. Buying a house and leaving my job where two of them. House buying happened over new year and it was very stressful, a few other things were going on as well, normal everyday things, physical health issues arose, some personal relationship things. Things that are normally quite capable, but on top of everything else, by the time the house went through, everything had come crashing back down around me.&lt;/p&gt;

&lt;p&gt;In February I took yet another month off work.&lt;/p&gt;

&lt;p&gt;I still hadn’t stopped seeing my councillor at this point. This ended up being one of the most beneficial things in terms of my recovery, and there were definitely times I felt it wasn’t right or I didn’t need to see her anymore, but I stuck with it and I am glad. Again I was integrated back into work, but this time I could hand in my notice. This was the biggest drain on my well being and leaving has irrefutably improved my health.&lt;/p&gt;

&lt;h3 id="slowly-but-surely-i-started-to-see-a-change"&gt;Slowly but surely I started to see a change.&lt;/h3&gt;

&lt;p&gt;I started to stand on my own two feet again and move my life out of this bleak emptiness that engulfed it.&lt;/p&gt;

&lt;p&gt;As with these things days are still a struggle. And it comes and goes in waves. But I was with my mum the other day, who said I was noticeably different, I didn’t look so withdrawn and colourless. I don’t feel so colourless anymore, I don’t feel like a shell, I feel like there’s something inside me again. I hold on to this.&lt;/p&gt;

&lt;p&gt;Last year was about being unwell and I stand by my last article, if you feel unwell please seek help, because this year, for me, this year has been about getting better. I hope now I can focus on getting well.&lt;/p&gt;

&lt;p&gt;But, don’t try to rush getting better, I know it’s an easy thing to say. I’ve never wanted my mental health to define me, even before the crash of last year, so I never give myself a break. This isn’t healthy, when you’re sick, you need to recover.&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>✨ Rumyra's Cool Links! ✨</title>
    <link rel="alternate" href="http://rumyrashead.com/Rumyras-Cool-Links-23-08-16.html"/>
    <id>http://rumyrashead.com/Rumyras-Cool-Links-23-08-16.html</id>
    <published>2016-08-23T01:00:00+01:00</published>
    <updated>2016-08-24T00:36:48+01:00</updated>
    <author>
      <name>Ruth John - @rumyra</name>
    </author>
    <content type="html">&lt;p&gt;I wrote this two days ago when I was stuck in an airport. I'm sure each one of you has frequented an airport recently what with it being the summer holidays and all. In fact you might even be reading this in an airport. It's not a long one, I've been a bit out of touch with the travelling, but there's still some gems 💎&lt;/p&gt;

&lt;p&gt;&lt;a href="https://twitter.com/onishiweb"&gt;Adam's&lt;/a&gt; been doing some great writing recently, check out &lt;a href="http://adamonishi.com/"&gt;his blog&lt;/a&gt; if you don't already. &lt;a href="http://adamonishi.com/2016/08/web-components-and-progressive-enhancement/"&gt;This article about Web Components and progressive enhancements&lt;/a&gt; is especially cool.&lt;/p&gt;

&lt;p&gt;Something also super helpful for me recently was &lt;a href="https://blog.codecentric.de/en/2016/07/getting-started-webpack/"&gt;this blog post from Daniel Mies&lt;/a&gt; about getting started with webpack. I was postCSS/cssnext-ing and not only was &lt;a href="https://twitter.com/danielmies"&gt;Daniel&lt;/a&gt; extremely helpful (super cool person to follow), but so was his post.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href="http://mewo2.com/notes/terrain/"&gt;Generate your own map&lt;/a&gt; using a really well thought out process and well documented. In face check out &lt;a href="http://mewo2.com/"&gt;Martin's homepage&lt;/a&gt; it appears everything he does is a pretty cool link.&lt;/p&gt;

&lt;p&gt;Not audio enough for you yet? I've been checking out and playing around with &lt;a href="https://github.com/Tonejs/Tone.js"&gt;Tone.js&lt;/a&gt; recently. It's a super nice layer over the Web Audio API. Me and &lt;a href="https://twitter.com/_2xAA"&gt;Sam&lt;/a&gt; put together a cool thing which I will share after I've stopped demoing it at conferences. (I promise it's super cool).&lt;/p&gt;

&lt;p&gt;Not cool enough for you yet?  Check out &lt;a href="http://executabledreams.net/B/emojiwin"&gt;this insane emoji fest&lt;/a&gt; - solitare style graphics on canvas - also supports multi touch events! Yup, I think it's actually too cool. 🎶💥🎉😎💙&lt;/p&gt;

&lt;p&gt;Oh and it's my birthday in a month. Yes, I know you're thinking: 'What the 😳 can I get Ruth? She's already got like 5 MIDI controllers…' Well you can totally &lt;a href="https://www.paypal.me/rumyra"&gt;donate to the Holtzmanns glasses fund&lt;/a&gt;. Yes I super think having a &lt;a href="http://www.liveforfilm.com/2016/08/04/ghostbusters-you-can-buy-holtzmanns-glasses/"&gt;pair of these&lt;/a&gt; from the recent Ghostbusters would be super cool to VJ in 😎-&amp;gt;😆 Hell I'd even wear them when writing these cool links posts, and that would easily make them ten times cooler!&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>Font Awesome SVGs</title>
    <link rel="alternate" href="http://rumyrashead.com/Font-Awesome-SVGs.html"/>
    <id>http://rumyrashead.com/Font-Awesome-SVGs.html</id>
    <published>2016-07-25T01:00:00+01:00</published>
    <updated>2016-07-25T14:12:42+01:00</updated>
    <author>
      <name>Ruth John - @rumyra</name>
    </author>
    <content type="html">&lt;p&gt;Doing a lot of prototyping in the past, having &lt;a href="http://fontawesome.io/"&gt;Font Awesome&lt;/a&gt; as part of my front end starter files was always really handy for quickly adding icons when I was building a UI.&lt;/p&gt;

&lt;p&gt;Nowadays we are more aware that using a font to represent icons isn’t necessarily the most accessible thing to do for everyone, &lt;a href="https://www.youtube.com/watch?v=9xXBYcWgCHA"&gt;as Serend explains here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;So as I’m whipping up a website right at this moment I thought it a good opportunity to take the first steps to swap out the font for svgs. So…&lt;/p&gt;

&lt;h5 id="heres-a-repo-with-font-awesome-icons-as-svgshttpsgithubcomrumyrafont-awesome-svgs"&gt;&lt;a href="https://github.com/Rumyra/Font-Awesome-SVGs"&gt;Here’s a repo with font awesome icons as svgs&lt;/a&gt;&lt;/h5&gt;

&lt;ol&gt;
  &lt;li&gt;I forked the Font Awesome repo so I can keep it as up to date with the original as I can.&lt;/li&gt;
  &lt;li&gt;I added an SVG folder to add all the generated glyphs to.&lt;/li&gt;
  &lt;li&gt;I used &lt;a href="https://www.npmjs.com/package/font-blast"&gt;font blast&lt;/a&gt; to generate SVGs from a font, a la &lt;a href="https://sarasoueidan.com/blog/icon-fonts-to-svg/"&gt;Sara Soueidan mentions in her blog post here&lt;/a&gt;.&lt;/li&gt;
  &lt;li&gt;To include the SVG’s I used the CSS Inline SVG Sprites method, &lt;a href="https://24ways.org/2014/an-overview-of-svg-sprite-creation-techniques/"&gt;again described by Sara here&lt;/a&gt;. It seemed the easiest to integrate with the set up I already had, as I was using classes to add icons to elements.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;The most long winded part was making sure I had all the correct icons - I think a good addition to this repo would be a generated spite sheet with stylesheet companion and easy reference classes. I’ve opened an issue 😎&lt;/p&gt;

&lt;p&gt;———————————————&lt;/p&gt;

&lt;p&gt;All Font Awesome licensing etc… still applies. Info etc… is in the origin &lt;a href="https://github.com/FortAwesome/Font-Awesome"&gt;readme here&lt;/a&gt;&lt;/p&gt;

</content>
  </entry>
  <entry>
    <title>✨ Rumyra's Cool Links! ✨</title>
    <link rel="alternate" href="http://rumyrashead.com/Rumyras-Cool-Links-20-07-16.html"/>
    <id>http://rumyrashead.com/Rumyras-Cool-Links-20-07-16.html</id>
    <published>2016-07-20T01:00:00+01:00</published>
    <updated>2016-07-21T10:04:56+01:00</updated>
    <author>
      <name>Ruth John - @rumyra</name>
    </author>
    <content type="html">&lt;p&gt;Phew, isn’t it warm 🌞🔥☀️*&lt;/p&gt;

&lt;p&gt;Well then, I guess it’s time for another instalment of ‘Rumyra’s Cool Links’ (the time will come when this has it’s own space).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;*For those viewing outside the UK it was 35 degrees yesterday and the country melted, we are currently trying to reanimate ourselves.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Easily and undoubtably top of my cool links this time is &lt;a href="https://codepen.io/jakealbaugh/full/qNrZyw"&gt;Jake Albaugh’s arpeggiator&lt;/a&gt;. I just can &lt;em&gt;not&lt;/em&gt; get enough of this. What an inspired, solid, clever and useful piece of engineering. It basically sums up everything ever about ‘why do we have the audio api again?’.&lt;/p&gt;

&lt;p&gt;This. That is all. Thanks &lt;a href="https://twitter.com/jake_albaugh"&gt;Mr. Albaugh&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;There is also &lt;a href="http://superlooper.universlabs.co.uk/"&gt;Superlooper&lt;/a&gt; from &lt;a href="http://www.universlabs.co.uk/"&gt;Univers Labs&lt;/a&gt; which not only contains beautiful loops but also visuals which are just simple but inspirational. (Very close to my own doodles around A/V so they’ll be more like this I’m sure).&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;If you want a hand with your audio visual creations &lt;a href="https://twitter.com/likethemammal"&gt;Chris Dolphin&lt;/a&gt; has created &lt;a href="https://github.com/likethemammal/visualizer-micro"&gt;visualizer-micro.js&lt;/a&gt; a teeny library wrapping just the analysis parts of the audio API, inspired by the methods from that ol’ dancer.js (man that feels like a decade ago right?).&lt;/p&gt;

&lt;p&gt;Other things that are cool include &lt;a href="http://bigstory.ap.org/article/ab73d19c160c4c509dc6b9decfec3c0f/south-korea-uses-technology-help-pregnant-women-get-seats"&gt;a great use of beacon technology to help pregnant women&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;a href="https://www.youtube.com/watch?v=hKRLcQ2Y8kA"&gt;This talk I saw at JS Oxford last month&lt;/a&gt; by &lt;a href="https://twitter.com/ashok_menon"&gt;Ashok Menon&lt;/a&gt; literally writing a language &lt;em&gt;with&lt;/em&gt; a language, or something, it was all like 😳 Very cool tho.&lt;/p&gt;

&lt;p&gt;I know others have linked to it, but the tab’s been open so long I couldn’t not include it. This is a &lt;a href="http://a.singlediv.com/"&gt;great showcase of what you can do with just one div and a love affair with CSS&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;And if you’re still hot after all that go and buy yourself a cool print, I saw this one and thought it was cool: &lt;a href="http://www.wearedorothy.com/shop/inside-information-minimoog"&gt;The insides of a Minimoog&lt;/a&gt; featuring all your fav artists.&lt;/p&gt;

</content>
  </entry>
</feed>
