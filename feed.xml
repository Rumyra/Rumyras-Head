<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Rumyra's Head</title>
  <subtitle></subtitle>
  <id>http://rumyrashead.com/</id>
  <link href="http://rumyrashead.com/"/>
  <link href="http://rumyrashead.com/feed.xml" rel="self"/>
  <updated>2016-11-22T00:00:00+00:00</updated>
  <author>
    <name>Ruth John - @rumyra</name>
  </author>
  <entry>
    <title>Codevember Number Fifteen</title>
    <link rel="alternate" href="http://rumyrashead.com/codevember-number-fifteen.html"/>
    <id>http://rumyrashead.com/codevember-number-fifteen.html</id>
    <published>2016-11-22T00:00:00+00:00</published>
    <updated>2016-11-22T15:57:33+00:00</updated>
    <author>
      <name>Ruth John - @rumyra</name>
    </author>
    <content type="html">&lt;h3 id="super-sun"&gt;Super Sun&lt;/h3&gt;

&lt;p&gt;Today's inspiration is:&lt;/p&gt;

&lt;figure&gt;
  &lt;img src="media/superSun.jpg" /&gt;
  &lt;figcaption&gt;The Super Sun&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;Today's is a little bit trickier as we have to create arc elements drawn in a circle that increase their outer arc with our data. But otherwise the code goes much the same as the previous days.&lt;/p&gt;

&lt;p&gt;Sorry this isn't more insightful, but I am on a train on the way to the airport! Hopefully I'll be making more on the plane ‚úàÔ∏è&lt;/p&gt;

&lt;p data-height="300" data-theme-id="1345" data-slug-hash="MbmwGy" data-default-tab="js,result" data-user="Rumyra" data-embed-version="2" data-pen-title="AudioVis Codevember #15" class="codepen"&gt;See the Pen &lt;a href="https://codepen.io/Rumyra/pen/MbmwGy/"&gt;AudioVis Codevember #15&lt;/a&gt; by Rumyra (&lt;a href="http://codepen.io/Rumyra"&gt;@Rumyra&lt;/a&gt;) on &lt;a href="http://codepen.io"&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async="" src="https://production-assets.codepen.io/assets/embed/ei.js"&gt;&lt;/script&gt;

</content>
  </entry>
  <entry>
    <title>Codevember Number Thirteen and Fourteen</title>
    <link rel="alternate" href="http://rumyrashead.com/codevember-number-thirfourteen.html"/>
    <id>http://rumyrashead.com/codevember-number-thirfourteen.html</id>
    <published>2016-11-21T00:00:00+00:00</published>
    <updated>2016-11-21T22:02:43+00:00</updated>
    <author>
      <name>Ruth John - @rumyra</name>
    </author>
    <content type="html">&lt;h2 id="part-three-d3js"&gt;Part Three: d3.js&lt;/h2&gt;

&lt;p&gt;Before I start I want to give a big shout out to &lt;a href="https://twitter.com/benjaminbenben"&gt;Ben (@benjaminbenben)&lt;/a&gt; who was helping me with some performance stuff I having trouble with. In doing so he really opened my eyes to how powerful d3 is and actually how suited a library it is to help with what we are doing here.&lt;/p&gt;

&lt;p&gt;It‚Äôs dubbed a ‚Äòvisualisation library‚Äô, however I think it‚Äôs relationship with data has given it a reputation that makes people who haven't discovered it, assume it‚Äôs just for pie charts. That‚Äôs changing now, and don‚Äôt get me wrong it‚Äôs good for displaying data, but that‚Äôs just it it‚Äôs good with displaying &lt;em&gt;and&lt;/em&gt; it‚Äôs good with data. So anything you want to do with the DOM or anything you want to do with data and d3 has you covered.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;I‚Äôve noticed a lot of the things I‚Äôm building use a great deal of DOM manipulation and data manipulation, so it felt like a great thing to start playing with. It‚Äôs also worth noting here I‚Äôm using version 3, version 4 was recently released with a great deal of updates and changes, but as I‚Äôm learning and pretty much all the tutorials still use version 3, I‚Äôm going to stick with that. When I‚Äôm more comfortable with the library I can start to look at the update documentation.&lt;/p&gt;

&lt;p&gt;Just have a glance down the &lt;a href="https://github.com/d3/d3/blob/master/API.md"&gt;API reference&lt;/a&gt; and we can see some totally useful data functions, array methods, thing‚Äôs for colour, layout, timing‚Ä¶ well loads of stuff which is great for what I‚Äôm doing here. Not just with creating, but keeping and manipulating, which is easier than me writing it all out manually, and will be much better performance wise as well.&lt;/p&gt;

&lt;p&gt;Ok, ok, enough evangelising. Let‚Äôs get using.&lt;/p&gt;

&lt;p&gt;We need data to get d3 to really do anything, but we have that, we have this array of velocity values from our frequency; &lt;code&gt;frequencyData&lt;/code&gt;. We can get d3 to create an element for each item in the array, attach the relative data to each element and then start to use it to manipulate the DOM element, whether that be change it‚Äôs size, position, colour of whatever.&lt;/p&gt;

&lt;h3 id="number-thirteen-super-chart"&gt;Number Thirteen: Super Chart&lt;/h3&gt;

&lt;figure&gt;
  &lt;img src="media/superGraphic.jpg" /&gt;
  &lt;figcaption&gt;Cover of Super Graphic book by Tim Leong&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;My inspiration for this series is from the book &lt;em&gt;Super Graphic&lt;/em&gt; by Tim Leong. It's a bunch of data visualisations from and about comic books. Check it out it's pretty sweet. Perfect for inspiration for audio vis!&lt;/p&gt;

&lt;p&gt;So let‚Äôs start with this example:&lt;/p&gt;

&lt;figure&gt;
  &lt;img src="media/superCharts.jpg" /&gt;
  &lt;figcaption&gt;The Super Charts&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;At the moment we have 256 items in our frequency array, piping that into d3 would mean it would create 256 elements, one for each frequency (unless we did some array manipulation, but for simplicities sake, let‚Äôs just reduce the number of elements).&lt;/p&gt;

&lt;p&gt;So let‚Äôs change it to less: &lt;code&gt;frequencyData = new Uint8Array(16);&lt;/code&gt; Remembering to change our fft size as well as we don't need it to be as big: &lt;code&gt;analyserNode.fftSize = 32;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now all we need is a little d3 &lt;a href="https://bl.ocks.org/mbostock/3808218"&gt;‚Äúenter and exit‚Äù&lt;/a&gt; pattern. This is where we take the data and create a new element for each item, bind the data item to said element and add some params using said data.&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;// enter and exit
var svg = d3.select('svg');
var circle = svg.selectAll('circle'),
  radius = window.innerHeight/2.5-50;

function drawCircles() {

  requestAnimationFrame(drawCircles);
  analyserNode.getByteFrequencyData(frequencyData);

  circle = circle.data(frequencyData);
  
  circle
    .enter().append('circle')
    .attr("cy", function(d, i) {
      return Math.round(window.innerHeight/2 + (radius*Math.sin((2*i*Math.PI)/16)) );
    })
    .attr("cx", function(d, i) {
      return Math.round(window.innerWidth/2 + (radius*Math.cos((2*i*Math.PI)/16)) );
    });
  
  circle
    .attr("r", function(d) { return d/2; })
    .attr("fill", "hsla(200,50%,80%,0.7)")
    .exit().remove();
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Here we‚Äôre creating a circle for each item in the &lt;code&gt;frequencyData&lt;/code&gt; array, then positioning them in a circle with a bit of maths. The params &lt;code&gt;d&lt;/code&gt; and &lt;code&gt;i&lt;/code&gt; being passed into the function are the data itself and the item number. So further below when we set the radius of the circle we can use the data, which as we know is the frequency velocity.&lt;/p&gt;

&lt;p&gt;This all seems a little more succinct than how we were going about it before. In the final example I‚Äôm also creating a line, just to add a bit more ü§ó&lt;/p&gt;

&lt;p data-height="300" data-theme-id="1345" data-slug-hash="ENWLzK" data-default-tab="js,result" data-user="Rumyra" data-embed-version="2" data-pen-title="Codevember AudioVis #13" class="codepen"&gt;See the Pen &lt;a href="https://codepen.io/Rumyra/pen/ENWLzK/"&gt;Codevember AudioVis #13&lt;/a&gt; by Rumyra (&lt;a href="http://codepen.io/Rumyra"&gt;@Rumyra&lt;/a&gt;) on &lt;a href="http://codepen.io"&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async="" src="https://production-assets.codepen.io/assets/embed/ei.js"&gt;&lt;/script&gt;

&lt;p&gt;You can already see the difference in performance compared to previous days. I‚Äôm from the "apprehensive to use a library unless I need/know etc‚Ä¶"" camp of JS, but in this instance it‚Äôs really helping. Most of the rest of the example are probably going to incorporate it I can imagine. So as we go through the next few days we can see what else d3 has to offer.&lt;/p&gt;

&lt;h3 id="number-fourteen-super-colours"&gt;Number Fourteen: Super Colours&lt;/h3&gt;

&lt;p&gt;What can I say - this one is probably the most me so far!&lt;/p&gt;

&lt;figure&gt;
  &lt;img src="media/superColours.jpg" /&gt;
  &lt;figcaption&gt;The Super Charts&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;The technique is much the same as the previous example, just this time we‚Äôre creating SVG &lt;code&gt;rect&lt;/code&gt; elements and doing some maths to position and colour them. The data is being used to adjust the brightness of the squares, although we could use it for anything. Another good example that would be good to live code at a gig.&lt;/p&gt;

&lt;p data-height="300" data-theme-id="1345" data-slug-hash="mOWKdL" data-default-tab="js,result" data-user="Rumyra" data-embed-version="2" data-pen-title="mOWKdL" class="codepen"&gt;See the Pen &lt;a href="https://codepen.io/Rumyra/pen/mOWKdL/"&gt;mOWKdL&lt;/a&gt; by Rumyra (&lt;a href="http://codepen.io/Rumyra"&gt;@Rumyra&lt;/a&gt;) on &lt;a href="http://codepen.io"&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async="" src="https://production-assets.codepen.io/assets/embed/ei.js"&gt;&lt;/script&gt;

</content>
  </entry>
  <entry>
    <title>Codevember Number Eleven And Twelve</title>
    <link rel="alternate" href="http://rumyrashead.com/codevember-number-eleventwelve.html"/>
    <id>http://rumyrashead.com/codevember-number-eleventwelve.html</id>
    <published>2016-11-20T00:00:00+00:00</published>
    <updated>2016-11-20T22:33:04+00:00</updated>
    <author>
      <name>Ruth John - @rumyra</name>
    </author>
    <content type="html">&lt;p&gt;This is an experiement in symmetry. An effect that would be great in the final audio vis software.&lt;/p&gt;

&lt;p data-height="300" data-theme-id="1345" data-slug-hash="bBqbBX" data-default-tab="js,result" data-user="Rumyra" data-embed-version="2" data-pen-title="Codevember AudioVis #11" class="codepen"&gt;See the Pen &lt;a href="https://codepen.io/Rumyra/pen/bBqbBX/"&gt;Codevember AudioVis #11&lt;/a&gt; by Rumyra (&lt;a href="http://codepen.io/Rumyra"&gt;@Rumyra&lt;/a&gt;) on &lt;a href="http://codepen.io"&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async="" src="https://production-assets.codepen.io/assets/embed/ei.js"&gt;&lt;/script&gt;

&lt;p&gt;The original idea is a function that would take whatever was in the DOM and reflect and repeat it around so it would automatically make it look awesome.&lt;/p&gt;

&lt;p&gt;It's kinda there - it needs some tweaking depending on whether we have an animation or gif/video that's needing the effect. Something that take some params depending on whether we want it rotated or reflected would be the best final solution me thinks.&lt;/p&gt;

&lt;p data-height="300" data-theme-id="1345" data-slug-hash="Ropbyv" data-default-tab="js,result" data-user="Rumyra" data-embed-version="2" data-pen-title="Codevember AudioVis #12" class="codepen"&gt;See the Pen &lt;a href="https://codepen.io/Rumyra/pen/Ropbyv/"&gt;Codevember AudioVis #12&lt;/a&gt; by Rumyra (&lt;a href="http://codepen.io/Rumyra"&gt;@Rumyra&lt;/a&gt;) on &lt;a href="http://codepen.io"&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async="" src="https://production-assets.codepen.io/assets/embed/ei.js"&gt;&lt;/script&gt;

</content>
  </entry>
  <entry>
    <title>Codevember Number Nine And Ten</title>
    <link rel="alternate" href="http://rumyrashead.com/codevember-number-nineten.html"/>
    <id>http://rumyrashead.com/codevember-number-nineten.html</id>
    <published>2016-11-19T00:00:00+00:00</published>
    <updated>2016-11-19T18:46:06+00:00</updated>
    <author>
      <name>Ruth John - @rumyra</name>
    </author>
    <content type="html">&lt;p&gt;Phew, there was a break wasn't there! Apparently it's hard to keep up when you're on the road. So I thought there's probably only one thing to do and that's try and do &lt;em&gt;two&lt;/em&gt; codevembers for the next few days to make up for it.&lt;/p&gt;

&lt;p&gt;Let's see how that goes ü§ì&lt;/p&gt;

&lt;h3 id="audiovis-9"&gt;AudioVis #9&lt;/h3&gt;

&lt;p&gt;NB This one comes with a warning. The way I coded this is highly UNRECOMMENDED. Not only was it a total ball ache, it doesn‚Äôt perform well and there are work arounds. It took what felt like days and the result is not amazing. If you‚Äôre wondering, I would probably use canvas for an audio vis of this nature in future. Hashtag learning, amiright?&lt;/p&gt;

&lt;p&gt;So today I‚Äôm going to expand a little on yesterday and take influence from &lt;a href="http://intothecontinuum.tumblr.com/post/119241330868/maihudson-mathematica-codesn-t-sinn3"&gt;this crazy gif&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;But in my version, I want a shape for each of the low frequencies, the mid frequencies and the high frequencies, that change depending on the level we get back from the analysis.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;I'm setting a load more custom properties than the previous &lt;a href="https://codepen.io/Rumyra/pen/yVeoJo"&gt;codevember&lt;/a&gt;, so I'm looping over them in the JS. Things I learnt include:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;We actually don‚Äôt need to set those properties in the root block at the top of our CSS if we‚Äôre setting them within our JavaScript. They‚Äôre set there, so they get passed into the CSS regardless‚Ä¶ nuice!&lt;/li&gt;
  &lt;li&gt;Maths in CSS is hard, even with nice things like a &lt;code&gt;calc&lt;/code&gt; function and shiny extras preprocessors like Sass give us. JavaScript is much better as maths, so I found keeping number crunching there is a lot better. Just pass the value you want in the CSS into the custom property.&lt;/li&gt;
&lt;/ul&gt;

&lt;p data-height="300" data-theme-id="1345" data-slug-hash="NbdXaE" data-default-tab="html,result" data-user="Rumyra" data-embed-version="2" data-pen-title="Codevember AudioVis #9" class="codepen"&gt;See the Pen &lt;a href="https://codepen.io/Rumyra/pen/NbdXaE/"&gt;Codevember AudioVis #9&lt;/a&gt; by Rumyra (&lt;a href="http://codepen.io/Rumyra"&gt;@Rumyra&lt;/a&gt;) on &lt;a href="http://codepen.io"&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async="" src="https://production-assets.codepen.io/assets/embed/ei.js"&gt;&lt;/script&gt;

&lt;p&gt;This one was a great learning experience and great experiment, even if the final result wasn't ideally what I was after at the start. I would keep using custom properties to do things like filter effects and glitch's for final VJing rather than modifying multiple DOM elements with them in the future.&lt;/p&gt;

&lt;h3 id="audiovis-10-blend-modes-"&gt;AudioVis #10: Blend Modes üòé&lt;/h3&gt;

&lt;p&gt;Inspiration:&lt;/p&gt;

&lt;figure&gt;
  &lt;img src="http://66.media.tumblr.com/cc6b92fc94e847f5358890da3ed2c5c5/tumblr_nobi29xtOO1sn5m9vo4_1280.gif" /&gt;
&lt;/figure&gt;

&lt;p&gt;I've actually written about using blend modes for &lt;a href="http://rumyrashead.com/a-little-thing-about-blends.html"&gt;this audio vis before&lt;/a&gt;. The make up of the visual itself isn't too different code wise to previous ones. I have some DOM elements, I am positioing them, I am animating them, the only extra feature I am encorporating is blend modes on the elements to see what effect that has.&lt;/p&gt;

&lt;p&gt;It looks super nice, but with all the DOM elements I have with this one performance isn't so great. I can up it by making sure I add the &lt;code&gt;will-change&lt;/code&gt; property in the CSS to any elements that have any other properties that are to change.&lt;/p&gt;

&lt;p&gt;However I think we should probably move into a better, more performant way of creating and manipulating DOM els for audio vis, don't you?&lt;/p&gt;

&lt;p data-height="300" data-theme-id="1345" data-slug-hash="BQprdW" data-default-tab="html,result" data-user="Rumyra" data-embed-version="2" data-pen-title="Codevember AudioVis #10" class="codepen"&gt;See the Pen &lt;a href="https://codepen.io/Rumyra/pen/BQprdW/"&gt;Codevember AudioVis #10&lt;/a&gt; by Rumyra (&lt;a href="http://codepen.io/Rumyra"&gt;@Rumyra&lt;/a&gt;) on &lt;a href="http://codepen.io"&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async="" src="https://production-assets.codepen.io/assets/embed/ei.js"&gt;&lt;/script&gt;

</content>
  </entry>
  <entry>
    <title>Codevember Number Eight</title>
    <link rel="alternate" href="http://rumyrashead.com/codevember-number-eight.html"/>
    <id>http://rumyrashead.com/codevember-number-eight.html</id>
    <published>2016-11-10T00:00:00+00:00</published>
    <updated>2016-11-11T23:57:44+00:00</updated>
    <author>
      <name>Ruth John - @rumyra</name>
    </author>
    <content type="html">&lt;h3 id="part-two-random-cool-new-features"&gt;Part Two: Random Cool New Features&lt;/h3&gt;

&lt;p&gt;So this next section I did ponder for a while. I could take you straight on to a much better way of creating visuals within the DOM, but before I do that I want to introduce some new features we have in simple CSS that can really help our visuals later down the track. Our inspiration for this set is a little tumblr called &lt;a href="http://intothecontinuum.tumblr.com/"&gt;Archery: Into the Continuum&lt;/a&gt;. Here I want to take inspiration from some of these random gifs, not exactly replicate them.&lt;/p&gt;

&lt;p&gt;So first up, this gif:&lt;/p&gt;

&lt;figure&gt;
  &lt;img src="http://67.media.tumblr.com/e829a18961367c45baf1c2dcbcea47a0/tumblr_mr6p8hVjSQ1qfjvexo2_r1_500.gif" /&gt;
&lt;/figure&gt;

&lt;h3 id="custom-properties"&gt;Custom Properties&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;Or&lt;/em&gt; JavaScript all up in your CSS&lt;/p&gt;

&lt;p&gt;And the much talked about CSS Custom properties. ‚ú®üí•üíú We can really use these to our advantage when doing audio vis work as we can reference them directly in our JavaScript and basically update our CSS in realtime.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Custom properties are declared at the start of your CSS with a &lt;code&gt;:root&lt;/code&gt; block and can be references throughout your CSS, much like (but not entirely) pre-processor variables. So instead of declaring properties that make sense as far as styling goes, I‚Äôm going to be changing them within my JavaScript, so it makes sense to name them something a little more explicit.&lt;/p&gt;

&lt;p&gt;For this we‚Äôll create a &lt;code&gt;‚Äîlevel&lt;/code&gt; property, and just grab one of the items of the &lt;code&gt;frequencyData&lt;/code&gt; array and pipe it in. This is where the magic happens:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-css"&gt;:root {
  --level: 1;
}&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class="language-javascript"&gt;document.documentElement.style.setProperty('--level', frequencyData[10]/255);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This ‚Äîlevel property will now update &lt;em&gt;*within our  css*&lt;/em&gt;. Oh. My. Gawd. I know right‚Ä¶ üò±&lt;/p&gt;

&lt;p&gt;Magic!&lt;/p&gt;

&lt;p&gt;So if we use it on the opacity for instance:&lt;/p&gt;

&lt;pre&gt;&lt;code class="language-css"&gt;i {
  opacity: var(--level);
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Boom! Opacity of &lt;code&gt;i&lt;/code&gt; updated! In real time, in our CSS.&lt;/p&gt;

&lt;p&gt;I know - all the wows!&lt;/p&gt;

&lt;p data-height="300" data-theme-id="1345" data-slug-hash="yVeoJo" data-default-tab="html,result" data-user="Rumyra" data-embed-version="2" data-pen-title="yVeoJo" class="codepen"&gt;See the Pen &lt;a href="https://codepen.io/Rumyra/pen/yVeoJo/"&gt;yVeoJo&lt;/a&gt; by Rumyra (&lt;a href="http://codepen.io/Rumyra"&gt;@Rumyra&lt;/a&gt;) on &lt;a href="http://codepen.io"&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async="" src="https://production-assets.codepen.io/assets/embed/ei.js"&gt;&lt;/script&gt;

</content>
  </entry>
  <entry>
    <title>Codevember Number Five</title>
    <link rel="alternate" href="http://rumyrashead.com/codevember-number-five.html"/>
    <id>http://rumyrashead.com/codevember-number-five.html</id>
    <published>2016-11-06T00:00:00+00:00</published>
    <updated>2016-11-06T18:27:50+00:00</updated>
    <author>
      <name>Ruth John - @rumyra</name>
    </author>
    <content type="html">&lt;p&gt;Today sees the last in our Bridget Riley series. We'll move on to something different tomorrow‚Ä¶&lt;/p&gt;

&lt;p&gt;Today is Bridget Riley's Static 4:&lt;/p&gt;

&lt;figure&gt;
  &lt;img src="/media/bridgetStatic.jpg" /&gt;
  &lt;figcaption&gt;Bridget Riley : Static 4&lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;This harks back to day three really, but it‚Äôs just a nice easy one. Albeit getting the circles to grow from the centre. Again nothing too special here, but it‚Äôll look super good laid over a video I‚Äôm sure :)&lt;/p&gt;

&lt;p data-height="300" data-theme-id="1345" data-slug-hash="yVypOR" data-default-tab="js,result" data-user="Rumyra" data-embed-version="2" data-pen-title="Codevember AudioVis #5" class="codepen"&gt;See the Pen &lt;a href="https://codepen.io/Rumyra/pen/yVypOR/"&gt;Codevember AudioVis #5&lt;/a&gt; by Rumyra (&lt;a href="http://codepen.io/Rumyra"&gt;@Rumyra&lt;/a&gt;) on &lt;a href="http://codepen.io"&gt;CodePen&lt;/a&gt;.&lt;/p&gt;
&lt;script async="" src="https://production-assets.codepen.io/assets/embed/ei.js"&gt;&lt;/script&gt;

&lt;p&gt;Let‚Äôs end on a classic: &lt;a href="https://www.youtube.com/watch?v=KYSPfTMyJ2s"&gt;A to the K - Cyprus Hill&lt;/a&gt;.&lt;/p&gt;
</content>
  </entry>
</feed>
